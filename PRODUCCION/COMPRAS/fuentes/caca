27d26
< DEFINE rm_b12	 	RECORD LIKE ctbt012.*
30a30
> DEFINE rm_p02		RECORD LIKE cxpt002.*	-- PROVEEDORES POR LOCALIDAD
33,34d32
< DEFINE vm_size_arr	INTEGER
< DEFINE vm_size_arr2	INTEGER
130,131c128,129
< CALL startlog('../logs/ordp202.err')
< --#CALL fgl_init4js()
---
> CALL startlog('../logs/ordp202.error')
> CALL fgl_init4js()
135c133,134
< 	CALL fl_mostrar_mensaje('Número de parámetros incorrecto.','stop')
---
> 	CALL fgl_winmessage(vg_producto, 'Número de parámetros incorrecto', 
>                             'stop')
152,153c151,152
< --#CALL fgl_settitle(vg_proceso || ' - ' || vg_producto)
< CALL fl_validar_parametros()
---
> CALL fgl_settitle(vg_proceso || ' - ' || vg_producto)
> CALL validar_parametros()
154a154
> 
162c162
< DEFINE done 		SMALLINT
---
> DEFINE done 	SMALLINT
164,168d163
< DEFINE lin_menu		SMALLINT
< DEFINE row_ini  	SMALLINT
< DEFINE num_rows 	SMALLINT
< DEFINE num_cols 	SMALLINT
< DEFINE run_prog		CHAR(10)
175,192c170,177
< LET lin_menu = 0
< LET row_ini  = 3
< LET num_rows = 22
< LET num_cols = 80
< IF vg_gui = 0 THEN
< 	LET lin_menu = 1
< 	LET row_ini  = 4
< 	LET num_rows = 20
< 	LET num_cols = 78
< END IF
< OPEN WINDOW w_202 AT row_ini, 2 WITH num_rows ROWS, num_cols COLUMNS
<     ATTRIBUTE(FORM LINE FIRST + 1, COMMENT LINE LAST, MENU LINE lin_menu,BORDER,
< 	      MESSAGE LINE LAST - 1)
< IF vg_gui = 1 THEN
< 	OPEN FORM f_202 FROM '../forms/ordf202_1'
< ELSE
< 	OPEN FORM f_202 FROM '../forms/ordf202_1c'
< END IF
---
> OPTIONS
> 	INPUT WRAP,
> 	ACCEPT KEY F12
> 
> OPEN WINDOW w_202 AT 3,2 WITH 22 ROWS, 80 COLUMNS
> 	ATTRIBUTE(FORM LINE FIRST + 1, COMMENT LINE LAST, MENU LINE 0,
> 		  BORDER, MESSAGE LINE LAST - 2) 
> OPEN FORM f_202 FROM '../forms/ordf202_1'
195c180
< CALL control_DISPLAY_botones()
---
> CALL control_display_botones()
197,198c182
< CALL retorna_tam_arr()
< LET vm_filas_pant = vm_size_arr
---
> LET vm_filas_pant = fgl_scr_size('r_detalle')
205,210d188
< {-- ESTO PARA LLAMAR AL PROGRAMA SEGÚN SEA EL AMBIENTE --}
< LET run_prog = 'fglrun '
< IF vg_gui = 0 THEN
< 	LET run_prog = 'fglgo '
< END IF
< {--- ---}
216d193
< 		HIDE OPTION 'Contabilizacion'
225d201
< 			SHOW OPTION 'Contabilizacion'
236d211
< 			SHOW OPTION 'Contabilizacion'
242,243c217
< 				--CALL fgl_winmessage(vg_producto,'La orden de compra no existe.','stop')
< 				CALL fl_mostrar_mensaje('La orden de compra no existe.','stop')
---
> 				CALL fgl_winmessage(vg_producto,'La orden de compra no existe.','exclamation')
248,249c222
< 				--CALL fgl_winmessage(vg_producto,'La orden de compra no tiene ninguna recepción.','stop')
< 				CALL fl_mostrar_mensaje('La orden de compra no tiene ninguna recepción.','stop')
---
> 				CALL fgl_winmessage(vg_producto,'La orden de compra no tiene ninguna recepción.','exclamation')
306c279
< 		CALL control_DISPLAY_array_ordt014()
---
> 		CALL control_display_array_ordt014()
313d285
< 			HIDE OPTION 'Contabilizacion'
326d297
< 			HIDE OPTION 'Contabilizacion'
334d304
< 			HIDE OPTION 'Contabilizacion'
338d307
< 			SHOW OPTION 'Contabilizacion'
343,344c312,313
< 			LET command_line = run_prog || 'ordp200 ' || vg_base
< 					|| ' ' || vg_modulo || ' ' || vg_codcia 
---
> 			LET command_line = 'fglrun ordp200 ' || vg_base || ' '
> 					    || vg_modulo || ' ' || vg_codcia 
352c321
< 			CALL control_DISPLAY_detalle_ordt015()
---
> 			CALL control_display_detalle_ordt015()
366,368d334
< 		IF done = 9 THEN
< 			CONTINUE MENU
< 		END IF
371d336
< 		HIDE OPTION 'Contabilizacion'
376c341
< 			CALL control_DISPLAY_botones()
---
> 			CALL control_display_botones()
380,382d344
< 	COMMAND KEY('C') 'Contabilizacion' 'Contabilizacion Recepción de Ordenes Compra.'
< 		CALL control_ver_contabilizacion()
< 
396d357
< DEFINE run_prog		CHAR(10)
410,415d370
< {-- ESTO PARA LLAMAR AL PROGRAMA SEGÚN SEA EL AMBIENTE --}
< LET run_prog = '; fglrun '
< IF vg_gui = 0 THEN
< 	LET run_prog = '; fglgo '
< END IF
< {--- ---}
418c373
<                    vg_separador, run_prog, 'cxpp304 ', vg_base,
---
>                    vg_separador, '; fglrun cxpp304 ', vg_base,
430,433c385,386
< IF vg_gui = 1 THEN
< 	DISPLAY "" AT 1,1
< 	DISPLAY vm_row_current, " de ", vm_num_recep AT 1, 67 
< END IF
---
> DISPLAY "" AT 1,1
> DISPLAY vm_row_current, " de ", vm_num_recep AT 1, 67 
463c416
< FUNCTION control_DISPLAY_botones()
---
> FUNCTION control_display_botones()
465,470c418,423
< --#DISPLAY 'C Ped'		TO tit_col0
< --#DISPLAY 'C Rec'		TO tit_col1
< --#DISPLAY 'Código' 		TO tit_col2
< --#DISPLAY 'Descripción'	TO tit_col3
< --#DISPLAY 'Des %'  		TO tit_col4
< --#DISPLAY 'Precio'		TO tit_col5
---
> DISPLAY 'C Ped'		TO tit_col0
> DISPLAY 'C Rec'		TO tit_col1
> DISPLAY 'Código' 	TO tit_col2
> DISPLAY 'Descripción'	TO tit_col3
> DISPLAY 'Des %'  	TO tit_col4
> DISPLAY 'Precio'	TO tit_col5
476c429
< FUNCTION control_DISPLAY_botones_2()
---
> FUNCTION control_display_botones_2()
478,482c431,435
< --#DISPLAY '#' 	 		TO tit_col1
< --#DISPLAY 'Fecha Vcto'		TO tit_col2
< --#DISPLAY 'Valor Capital'	TO tit_col3
< --#DISPLAY 'Valor Interes'	TO tit_col4
< --#DISPLAY 'Subtotal'		TO tit_col5
---
> DISPLAY '#' 	 	TO tit_col1
> DISPLAY 'Fecha Vcto'	TO tit_col2
> DISPLAY 'Valor Capital'	TO tit_col3
> DISPLAY 'Valor Interes'	TO tit_col4
> DISPLAY 'Subtotal'	TO tit_col5
488c441
< FUNCTION control_DISPLAY_botones_3()
---
> FUNCTION control_display_botones_3()
490,494c443,447
< --#DISPLAY 'Descripción' TO bt_nom_ret
< --#DISPLAY 'Tipo R.'     TO bt_tipo_ret
< --#DISPLAY 'Valor Base'  TO bt_base 
< --#DISPLAY '%'           TO bt_porc
< --#DISPLAY 'Subtotal'    TO bt_valor
---
> DISPLAY 'Descripción' TO bt_nom_ret
> DISPLAY 'Tipo R.'     TO bt_tipo_ret
> DISPLAY 'Valor Base'  TO bt_base 
> DISPLAY '%'           TO bt_porc
> DISPLAY 'Subtotal'    TO bt_valor
541,544c494,495
< 			rm_c13.c13_num_guia,
< 			rm_c13.c13_estado,    rm_c13.c13_fecha_eli,
< 			rm_c13.c13_dif_cuadre, 
< 			rm_c13.c13_flete, rm_c13.c13_otros
---
> 			rm_c13.c13_usuario,   rm_c13.c13_num_guia,
> 			rm_c13.c13_estado,    rm_c13.c13_fecha_eli	
546,548d496
< IF vg_gui = 0 THEN
< 	CALL muestra_tipopago(rm_c10.c10_tipo_pago)
< END IF
556,557c504
< CALL retorna_tam_arr()
< LET vm_filas_pant = vm_size_arr
---
> LET vm_filas_pant = fgl_scr_size('r_detalle')
626c573
< FUNCTION control_DISPLAY_array_ordt014()
---
> FUNCTION control_display_array_ordt014()
632a580,587
>         BEFORE DISPLAY
>                 CALL dialog.keysetlabel('ACCEPT','')
> 	BEFORE ROW
> 		LET i = arr_curr()
> 		LET j = scr_line()
> 
>         AFTER DISPLAY
>                 CONTINUE DISPLAY
635,645d589
<         ON KEY(F1,CONTROL-W)
< 		CALL llamar_visor_teclas()
<         --#BEFORE DISPLAY
<                 --#CALL dialog.keysetlabel('ACCEPT','')
< 		--#CALL dialog.keysetlabel("F1","")
< 		--#CALL dialog.keysetlabel("CONTROL-W","")
< 	--#BEFORE ROW
< 		--#LET i = arr_curr()
< 		--#LET j = scr_line()
<         --#AFTER DISPLAY
<                 --#CONTINUE DISPLAY
662,666c606
< IF vg_gui = 1 THEN
< 	OPEN FORM f_214_4 FROM '../forms/ordf202_3'
< ELSE
< 	OPEN FORM f_214_4 FROM '../forms/ordf202_3c'
< END IF
---
> OPEN FORM f_214_4 FROM '../forms/ordf202_3'
669c609
< CALL control_DISPLAY_botones_3()
---
> CALL control_display_botones_3()
686,687c626,628
< 	--CALL fgl_winmessage(vg_producto,'No hay datos a mostrar.','exclamation')
< 	CALL fl_mostrar_mensaje('No hay datos a mostrar.','exclamation')
---
> 	CALL fgl_winmessage(vg_producto,
> 		'No hay datos a mostrar.',
> 		'exclamation')
700,701d640
<         ON KEY(F1,CONTROL-W)
< 		CALL llamar_visor_teclas()
704,707c643,644
< 		--#CALL dialog.keysetlabel('INSERT', '')
< 		--#CALL dialog.keysetlabel('DELETE', '')
< 		--#CALL dialog.keysetlabel("F1","")
< 		--#CALL dialog.keysetlabel("CONTROL-W","")
---
> 		CALL dialog.keysetlabel('INSERT', '')
> 		CALL dialog.keysetlabel('DELETE', '')
728,729c665
< 				--CALL fgl_winmessage(vg_producto,'Valor base debe ser menor / igual que el valor de la O.C.','exclamation')
< 				CALL fl_mostrar_mensaje('Valor base debe ser menor / igual que el valor de la O.C.','exclamation')
---
> 				CALL fgl_winmessage(vg_producto,'Valor base debe ser menor / igual que el valor de la O.C.','exclamation')
784c720
< 			NEXT FIELD check
---
> 			NEXT FIELD ra_ret[j].check
947c883
< CALL control_DISPLAY_botones()
---
> CALL control_display_botones()
957c893
< DISPLAY BY NAME rm_c13.c13_fecing, rm_c13.c13_estado
---
> DISPLAY BY NAME rm_c13.c13_fecing, rm_c13.c13_usuario, rm_c13.c13_estado
961d896
< BEGIN WORK
962a898,899
> 
> BEGIN WORK
972a910
> WHENEVER ERROR STOP
974d911
< 	WHENEVER ERROR STOP
977,978c914
< 	--CALL fgl_winmessage(vg_producto,'La orden de compra está siendo recibida por otro usuario.','exclamation')
< 	CALL fl_mostrar_mensaje('La orden de compra está siendo recibida por otro usuario.','exclamation')
---
> 	CALL fgl_winmessage(vg_producto,'La orden de compra está siendo recibida por otro usuario.','exclamation')
980c916
< 	CALL control_DISPLAY_botones()
---
> 	CALL control_display_botones()
983d918
< WHENEVER ERROR STOP
988c923
< 	CALL control_DISPLAY_botones()
---
> 	CALL control_display_botones()
998c933
< 	CALL control_DISPLAY_botones()
---
> 	CALL control_display_botones()
1015,1022c950,952
< 		{
< 		CALL fgl_winmessage(vg_producto,'Orden de trabajo: ' ||
< 				    rm_c10.c10_ord_trabajo || ' no existe.',
< 				    'stop')
< 		}
< 		CALL fl_mostrar_mensaje('Orden de trabajo: ' ||
< 				    rm_c10.c10_ord_trabajo || ' no existe.',
< 				    'stop')
---
> 		CALL fgl_winmessage(vg_producto, 'Orden de trabajo: ' ||
> 				    rm_c10.c10_ord_trabajo ||
> 				    ' no existe.', 'stop')
1027,1028c957
< 		{
< 		CALL fgl_winmessage(vg_producto,'Orden de trabajo: ' ||
---
> 		CALL fgl_winmessage(vg_producto, 'Orden de trabajo: ' ||
1031,1034d959
< 		}
< 		CALL fl_mostrar_mensaje('Orden de trabajo: ' ||
< 				    rm_c10.c10_ord_trabajo ||
< 				    ' está bloqueada por otro proceso.','stop')
1039,1044c964
< 		{
< 		CALL fgl_winmessage(vg_producto,'Estado de O.T. ' || 
< 			    	rm_c10.c10_ord_trabajo ||
< 			    	' no está activa.','stop')
< 		}
< 		CALL fl_mostrar_mensaje('Estado de O.T. ' || 
---
> 		CALL fgl_winmessage(vg_producto, 'Estado de O.T. ' || 
1046c966
< 			    	' no está activa.','stop')
---
> 			    	' no está activa.', 'stop')
1059c979
< 	CALL control_DISPLAY_array_ordt014()
---
> 	CALL control_display_array_ordt014()
1070c990
< 	CALL control_DISPLAY_botones()
---
> 	CALL control_display_botones()
1082,1089c1002,1009
< DEFINE done 		SMALLINT
< DEFINE resp		CHAR(6)
< DEFINE estado  	 	LIKE ordt010.c10_estado
< DEFINE r_c01		RECORD LIKE ordt001.*
< DEFINE r_b00		RECORD LIKE ctbt000.*
< DEFINE r_b12		RECORD LIKE ctbt012.*
< DEFINE comando		VARCHAR(250)
< DEFINE run_prog		CHAR(10)
---
> 
> DEFINE done 	SMALLINT
> DEFINE resp	CHAR(6)
> DEFINE estado   LIKE ordt010.c10_estado
> 
> DEFINE r_c01	RECORD LIKE ordt001.*
> DEFINE r_b00	RECORD LIKE ctbt000.*
> DEFINE r_b12	RECORD LIKE ctbt012.*
1095,1097c1015,1017
< 	--CALL fgl_winmessage(vg_producto,'Debe generar la forma de pago.','exclamation')
< 	CALL fl_mostrar_mensaje('Debe generar la forma de pago.','exclamation')
< 	RETURN 9
---
> 	CALL fgl_winmessage(vg_producto,'Debe generar la forma de pago.',
> 			    'exclamation')
> 	RETURN 0
1104,1106c1024,1026
< 	--CALL fgl_winmessage(vg_producto,'Debe ingresar las retenciones.','exclamation')
< 	CALL fl_mostrar_mensaje('Debe ingresar las retenciones.','exclamation')
< 	RETURN 9
---
> 	CALL fgl_winmessage(vg_producto, 'Debe ingresar las retenciones.',
> 			    'exclamation')
> 	RETURN 0
1111c1031
< 	CALL fl_hacer_pregunta('La orden de compra no ha sido recibida completamente desea recibir restante ?','No')
---
> 	CALL fgl_winquestion(vg_producto,'La orden de compra no ha sido recibida completamente desea recibir restante ?','No','Yes|No', 'question',1)
1142,1144d1061
< IF vg_gui = 0 THEN
< 	CALL muestra_tipopago(rm_c10.c10_tipo_pago)
< END IF
1175,1177d1091
< IF vg_gui = 0 THEN
< 	CALL muestra_tipopago(rm_c10.c10_tipo_pago)
< END IF
1190,1192c1104,1105
< CALL fl_lee_compania_contabilidad(vg_codcia) RETURNING r_b00.*
< IF rm_c10.c10_ord_trabajo IS NULL THEN
< --IF r_c01.c01_gendia_auto = 'N' THEN 
---
> IF r_c01.c01_gendia_auto = 'N' THEN 
> 	CALL fl_lee_compania_contabilidad(vg_codcia) RETURNING r_b00.*
1194,1198c1107
< 		IF r_c01.c01_modulo <> 'AF' OR r_c01.c01_modulo IS NULL THEN
< 			CALL contabilizacion_online() RETURNING r_b12.*
< 		ELSE
< 			CALL contabilizacion_activo() RETURNING r_b12.*
< 		END IF
---
> 		CALL contabilizacion_online() RETURNING r_b12.*
1203d1111
< --END IF
1204a1113
> 
1206,1224c1115
< IF r_b12.b12_compania IS NOT NULL THEN
< 	{-- ESTO PARA LLAMAR AL PROGRAMA SEGÚN SEA EL AMBIENTE --}
< 	LET run_prog = '; fglrun '
< 	IF vg_gui = 0 THEN
< 		LET run_prog = '; fglgo '
< 	END IF
< 	{--- ---}
< 	CALL fl_hacer_pregunta('Desea ver contabilizacion generada?','No')
< 		RETURNING resp
< 	IF resp = 'Yes' THEN
< 		LET comando = 'cd ..', vg_separador, '..', vg_separador,
< 	      			'CONTABILIDAD', vg_separador, 'fuentes',
< 	      			vg_separador, run_prog, 'ctbp201 ',
< 				vg_base, ' ', 'CB', vg_codcia, ' ',
< 				r_b12.b12_tipo_comp, ' ', 
< 				r_b12.b12_num_comp
< 		RUN comando
< 	END IF
< END IF
---
> 
1236,1237c1127
< --CALL fgl_winmessage(vg_producto,'Proceso realizado Ok.','info')
< CALL fl_mostrar_mensaje('Proceso realizado Ok.','info')
---
> CALL fgl_winmessage(vg_producto,'Proceso realizado Ok.','info')
1240c1130
< CALL control_DISPLAY_botones()
---
> CALL control_display_botones()
1328,1329c1218,1219
< LET r_p22.p22_referencia = 'RET # ', rm_p27.p27_num_ret, ', RECEP # ', 
< 			   rm_c13.c13_num_recep, ', OC # ',
---
> LET r_p22.p22_referencia = 'RET # '|| rm_p27.p27_num_ret, ', RECEP # '|| 
> 			   rm_c13.c13_num_recep || ', OC # '||
1447c1337
< UPDATE cxpt020 SET p20_saldo_cap = 0
---
> UPDATE cxpt020 SET p20_saldo_cap = p20_saldo_cap - val_pagar
1480,1481c1370
< 	--CALL fgl_winmessage(vg_producto,'No existe configuracion de secuencias para este tipo de transacción.','stop')
< 	CALL fl_mostrar_mensaje('No existe configuracion de secuencias para este tipo de transacción.','stop')
---
> 	CALL fgl_winmessage(vg_producto,'No existe configuracion de secuencias para este tipo de transacción.','stop')
1495c1384
< FUNCTION control_DISPLAY_detalle_ordt015() 
---
> FUNCTION control_display_detalle_ordt015() 
1500,1504c1389
< IF vg_gui = 1 THEN
< 	OPEN FORM f_202_2 FROM '../forms/ordf202_2'
< ELSE
< 	OPEN FORM f_202_2 FROM '../forms/ordf202_2c'
< END IF
---
> OPEN FORM f_202_2 FROM '../forms/ordf202_2'
1507c1392
< CALL control_DISPLAY_botones_2()
---
> CALL control_display_botones_2()
1515c1400
< CALL control_DISPLAY_array_ordt015()
---
> CALL control_display_array_ordt015()
1584,1585d1468
< LET rm_c13.c13_flete       = rm_c10.c10_flete
< LET rm_c13.c13_otros       = rm_c10.c10_otros
1595a1479
> 
1607,1608c1491
< CALL retorna_tam_arr2()
< FOR k = 1 TO vm_size_arr2
---
> FOR k = 1 TO fgl_scr_size('r_detalle_2')
1666,1667c1549
< CALL retorna_tam_arr2()
< FOR k = 1 TO vm_size_arr2
---
> FOR k = 1 TO fgl_scr_size('r_detalle_2')
1808,1810d1689
<         ON KEY(F1,CONTROL-W)
< 		CALL llamar_visor_teclas()
< 
1824,1826d1702
< 				IF vg_gui = 0 THEN
< 				     CALL muestra_tipopago(rm_c10.c10_tipo_pago)
< 				END IF
1831,1833d1706
< 	BEFORE INPUT
< 		--#CALL dialog.keysetlabel("F1","")
< 		--#CALL dialog.keysetlabel("CONTROL-W","")
1842,1843c1715
< 		    		--CALL fgl_winmessage(vg_producto,'No existe la orden de compra en la Compañía. ','exclamation')
< 				CALL fl_mostrar_mensaje('No existe la orden de compra en la Compañía.','exclamation')
---
> 		    		CALL fgl_winmessage (vg_producto, 'No existe la orden de compra en la Compañía. ','exclamation')
1853,1854c1725
< 				--CALL fgl_winmessage(vg_producto,'La Orden de Compra no ha sido aprobada.','exclamation')
< 				CALL fl_mostrar_mensaje('La Orden de Compra no ha sido aprobada.','exclamation')
---
> 				CALL fgl_winmessage(vg_producto,'La Orden de Compra no ha sido aprobada.','exclamation')
1860,1861c1731
< 				--CALL fgl_winmessage(vg_producto,'La Orden de Compra está cerrada.','exclamation')
< 				CALL fl_mostrar_mensaje('La Orden de Compra está cerrada.','exclamation')
---
> 				CALL fgl_winmessage(vg_producto,'La Orden de Compra está cerrada.','exclamation')
1872,1873c1742
< 				--CALL fgl_winmessage(vg_producto,'La orden de compra pertenece a inventarios debe ser recibida por compra local.','exclamation')
< 				CALL fl_mostrar_mensaje('La orden de compra pertenece a inventarios debe ser recibida por compra local.','exclamation')
---
> 				CALL fgl_winmessage(vg_producto,'La orden de compra pertenece a inventarios debe ser recibida por compra local.','exclamation')
1880,1882d1748
< 			IF vg_gui = 0 THEN
< 		        	CALL muestra_tipopago(rm_c10.c10_tipo_pago)
< 			END IF
1894,1895d1759
< 			DISPLAY rm_c10.c10_flete TO c13_flete
< 			DISPLAY rm_c10.c10_otros TO c13_otros
1903a1768
> display 'dd'
1909,1910c1774
< 			--CALL fgl_winmessage(vg_producto,'La factura ya ha sido recibida.','exclamation')
< 			CALL fl_mostrar_mensaje('La factura ya ha sido recibida.','exclamation')
---
> 			CALL fgl_winmessage(vg_producto,'La factura ya ha sido recibida.','exclamation')
1930,1931c1794
< CALL retorna_tam_arr()
< LET vm_filas_pant  = vm_size_arr
---
> LET vm_filas_pant  = fgl_scr_size('r_detalle')
1945,1948c1808,1809
< 			--#CALL dialog.keysetlabel('DELETE','')
< 			--#CALL dialog.keysetlabel('INSERT','')
< 			--#CALL dialog.keysetlabel("F1","")
< 			--#CALL dialog.keysetlabel("CONTROL-W","")
---
> 			CALL dialog.keysetlabel('DELETE','')
> 			CALL dialog.keysetlabel('INSERT','')
1958,1959d1818
<         	ON KEY(F1,CONTROL-W)
< 			CALL llamar_visor_teclas()
1964d1822
< 			CALL calcula_totales()
1970,1972d1827
< 			LET r_detalle[i].c14_cantidad = r_detalle[i].c11_cant_ped 	
< 			DISPLAY r_detalle[i].c14_cantidad TO
< 				r_detalle[j].c14_cantidad   
1977,1978c1832
< 					--CALL fgl_winmessage(vg_producto,'La cantidad recibida debe ser menor o igual a la pedida.','exclamation')
< 					CALL fl_mostrar_mensaje('La cantidad recibida debe ser menor o igual a la pedida.','exclamation')
---
> 					CALL fgl_winmessage(vg_producto,'La cantidad recibida debe ser menor o igual a la pedida.','exclamation')
2050,2051c1904
< 	WHERE c13_estado    <> 'E' 
<           AND c13_compania  = vg_codcia
---
> 	WHERE c13_compania  = vg_codcia
2078,2080d1930
< LET rm_c13.c13_dif_cuadre  = rm_c10.c10_dif_cuadre
< LET rm_c13.c13_flete       = rm_c10.c10_flete
< LET rm_c13.c13_otros       = rm_c10.c10_otros
2130,2136c1980
< IF val_bienes > 0 THEN
< 	LET val_bienes = val_bienes + rm_c13.c13_otros
< ELSE
< 	IF val_servi > 0 THEN
< 		LET val_servi = val_servi + rm_c13.c13_otros
< 	END IF
< END IF
---
> 
2138,2140c1982,1983
< 	LET rm_c13.c13_tot_impto = (rm_c13.c13_tot_bruto - rm_c13.c13_tot_dscto + 
< 	            		    rm_c13.c13_otros + 
< 				    rm_c10.c10_dif_cuadre) * (vm_impuesto / 100)
---
> 	LET rm_c13.c13_tot_impto = (rm_c13.c13_tot_bruto - rm_c13.c13_tot_dscto)
> 				   * (vm_impuesto / 100)
2146a1990
> 
2148,2149c1992
< 			   rm_c13.c13_tot_impto	+ rm_c13.c13_flete +
< 			   rm_c13.c13_otros     + rm_c13.c13_dif_cuadre
---
> 			   rm_c13.c13_tot_impto	
2152,2153c1995
< 		rm_c13.c13_tot_impto, rm_c13.c13_tot_recep,
< 		rm_c13.c13_dif_cuadre
---
> 		rm_c13.c13_tot_impto, rm_c13.c13_tot_recep
2164,2165c2006
< CALL retorna_tam_arr()
< LET vm_filas_pant = vm_size_arr
---
> LET vm_filas_pant = fgl_scr_size('r_detalle')
2187c2028
< 		LET r_detalle[i].c14_cantidad  = r_detalle[i].c11_cant_ped
---
> 		LET r_detalle[i].c14_cantidad  = 0 
2200,2201c2041
< 			--CALL fgl_winmessage(vg_producto,'La cantidad de elementos del detalle supero la cantidad de elementos del arreglo','stop')
< 			CALL fl_mostrar_mensaje('La cantidad de elementos del detalle supero la cantidad de elementos del arreglo','stop')
---
> 			CALL fgl_winmessage(vg_producto,'La cantidad de elementos del detalle supero la cantidad de elementos del arreglo','stop')
2209,2210c2049,2051
< 	--CALL fgl_winmessage(vg_producto,'No hay elementos del detalle que recibir','exclamation')
< 	CALL fl_mostrar_mensaje('No hay elementos del detalle que recibir.','exclamation')
---
> 	CALL fgl_winmessage(vg_producto,
> 			    'No hay elementos del detalle que recibir',
> 			    'exclamation')
2225,2229c2066
< IF vg_gui = 1 THEN
< 	OPEN FORM f_202_2 FROM '../forms/ordf202_2'
< ELSE
< 	OPEN FORM f_202_2 FROM '../forms/ordf202_2c'
< END IF
---
> OPEN FORM f_202_2 FROM '../forms/ordf202_2'
2232c2069
< CALL control_DISPLAY_botones_2()
---
> CALL control_display_botones_2()
2255c2092
< 	CALL control_DISPLAY_array_ordt015()
---
> 	CALL control_display_array_ordt015()
2312,2316c2149
<         ON KEY(F1,CONTROL-W)
< 		CALL llamar_visor_teclas()
< 	BEFORE INPUT
< 		--#CALL dialog.keysetlabel("F1","")
< 		--#CALL dialog.keysetlabel("CONTROL-W","")
---
> 		
2319,2320c2152
< 			--CALL fgl_winmessage(vg_producto,'Debe ingresar una fecha mayor o igual a la de hoy.','exclamation')
< 			CALL fl_mostrar_mensaje('Debe ingresar una fecha mayor o igual a la de hoy.','exclamation')
---
> 			CALL fgl_winmessage(vg_producto,'Debe ingresar una fecha mayor o igual a la de hoy.','exclamation')
2338,2339c2170
< 			--CALL fgl_winmessage(vg_producto,'Debe ingresar el número de pagos para generar el detalle.','exclamation')
< 			CALL fl_mostrar_mensaje('Debe ingresar el número de pagos para generar el detalle.','exclamation')
---
> 			CALL fgl_winmessage(vg_producto,'Debe ingresar el número de pagos para generar el detalle.','exclamation')
2344,2345c2175
< 			--CALL fgl_winmessage(vg_producto,'Debe ingresar la fecha del primer pago de la orden de compra.','exclamation')
< 			CALL fl_mostrar_mensaje('Debe ingresar la fecha del primer pago de la orden de compra.','exclamation')
---
> 			CALL fgl_winmessage(vg_producto,'Debe ingresar la fecha del primer pago de la orden de compra.','exclamation')
2350,2351c2180
< 			--CALL fgl_winmessage(vg_producto,'Debe ingresar el número de días entre pagos para generar el detalle.','exclamation')
< 			CALL fl_mostrar_mensaje('Debe ingresar el número de días entre pagos para generar el detalle.','exclamation')
---
> 			CALL fgl_winmessage(vg_producto,'Debe ingresar el número de días entre pagos para generar el detalle.','exclamation')
2379,2382c2208,2209
< 			--#CALL dialog.keysetlabel ('INSERT','')
< 			--#CALL dialog.keysetlabel ('DELETE','')
< 			--#CALL dialog.keysetlabel("F1","")
< 			--#CALL dialog.keysetlabel("CONTROL-W","")
---
> 			CALL dialog.keysetlabel ('INSERT','')
> 			CALL dialog.keysetlabel ('DELETE','')
2394,2395d2220
<         	ON KEY(F1,CONTROL-W)
< 			CALL llamar_visor_teclas()
2425,2426c2250
< 					--CALL fgl_winmessage(vg_producto,'Existen fechas que resultan menores a las ingresadas anteriormente en los pagos. ','exclamation')
< 					CALL fl_mostrar_mensaje('Existen fechas que resultan menores a las ingresadas anteriormente en los pagos.','exclamation')
---
> 					CALL fgl_winmessage(vg_producto,'Existen fechas que resultan menores a las ingresadas anteriormente en los pagos. ','exclamation')
2432,2433c2256
< 				--CALL fgl_winmessage(vg_producto,'El total del valor capital es mayor al total de la deuda. ','exclamation')
< 				CALL fl_mostrar_mensaje('El total del valor capital es mayor al total de la deuda.','exclamation')
---
> 				CALL fgl_winmessage(vg_producto,'El total del valor capital es mayor al total de la deuda. ','exclamation')
2438,2439c2261
< 				--CALL fgl_winmessage(vg_producto,'El total del valor capital es menor al total de la deuda. ','exclamation')
< 				CALL fl_mostrar_mensaje('El total del valor capital es menor al total de la deuda.','exclamation')
---
> 				CALL fgl_winmessage(vg_producto,'El total del valor capital es menor al total de la deuda. ','exclamation')
2483,2484c2305
< 	CALL retorna_tam_arr()
< 	LET vm_filas_pant = vm_size_arr2
---
> 	LET vm_filas_pant = fgl_scr_size('r_detalle_2')
2498c2319
< FUNCTION control_DISPLAY_array_ordt015()
---
> FUNCTION control_display_array_ordt015()
2504a2326,2329
>         BEFORE DISPLAY
>                 CALL dialog.keysetlabel('ACCEPT','')
>         AFTER DISPLAY
>                 CONTINUE DISPLAY
2507,2514d2331
<         ON KEY(F1,CONTROL-W)
< 		CALL llamar_visor_teclas()
<         --#BEFORE DISPLAY
<                 --#CALL dialog.keysetlabel('ACCEPT','')
< 		--#CALL dialog.keysetlabel("F1","")
< 		--#CALL dialog.keysetlabel("CONTROL-W","")
<         --#AFTER DISPLAY
<                 --#CONTINUE DISPLAY
2558d2374
< INITIALIZE r_p20.* TO NULL
2624c2440
< 	SELECT c11_tipo, (c11_cant_ped * c11_precio) - c11_val_descto
---
> 	SELECT c11_tipo, SUM((c11_cant_ped * c11_precio) - c11_val_descto)
2628a2445
> 		GROUP BY 1
2632,2633d2448
< 	LET valor = valor + (valor * rm_c10.c10_recargo / 100)
< 	LET valor = fl_retorna_precision_valor(rm_c10.c10_moneda, valor)
2635c2450
< 		LET tot_rep = tot_rep + valor
---
> 		LET tot_rep = valor
2637c2452
< 		LET tot_mo  = tot_mo  + valor
---
> 		LET tot_mo  = valor
2639a2455,2458
> LET tot_rep = tot_rep + (tot_rep * rm_c10.c10_recargo / 100)
> LET tot_rep = fl_retorna_precision_valor(rm_c10.c10_moneda, tot_rep)
> LET tot_mo  = tot_mo  + (tot_mo  * rm_c10.c10_recargo / 100)
> LET tot_mo  = fl_retorna_precision_valor(rm_c10.c10_moneda, tot_mo)
2667,2670c2486,2489
< DEFINE resp		VARCHAR(10)
< DEFINE retenciones	SMALLINT
< DEFINE comando		VARCHAR(250)
< DEFINE run_prog		CHAR(10)
---
> 
> DEFINE resp			VARCHAR(10)
> DEFINE retenciones		SMALLINT
> DEFINE comando			VARCHAR(250)
2673,2675c2492,2494
< 	WHERE p28_compania  = rm_p27.p27_compania
< 	  AND p28_localidad = rm_p27.p27_localidad
< 	  AND p28_num_ret   = rm_p27.p27_num_ret
---
> WHERE p28_compania  = rm_p27.p27_compania
>   AND p28_localidad = rm_p27.p27_localidad
>   AND p28_num_ret   = rm_p27.p27_num_ret
2681,2689c2500,2501
< {-- ESTO PARA LLAMAR AL PROGRAMA SEGÚN SEA EL AMBIENTE --}
< LET run_prog = '; fglrun '
< IF vg_gui = 0 THEN
< 	LET run_prog = '; fglgo '
< END IF
< {--- ---}
< --CALL fgl_winquestion(vg_producto,'Desea imprimir comprobante de retencion?','No','Yes|No','question',1)
< CALL fl_hacer_pregunta('Desea imprimir comprobante de retencion?','No')
< 	RETURNING resp
---
> CALL fgl_winquestion(vg_producto, 'Desea imprimir comprobante de retencion?', 
> 	'No', 'Yes|No', 'question', 1) RETURNING resp
2693c2505
< 		      vg_separador, run_prog, 'cxpp405 ', vg_base, ' ',
---
> 		      vg_separador, '; fglrun cxpp405 ', vg_base, ' ',
2704a2517
> 
2707d2519
< DEFINE r_p00		RECORD LIKE cxpt000.*
2720c2532
< DEFINE i, j, l, col	SMALLINT
---
> DEFINE i, j, col	SMALLINT
2762c2574
< OPEN WINDOW w_202_4 AT 8, 2 WITH 14 ROWS, 78 COLUMNS
---
> OPEN WINDOW w_202_4 AT 8,3 WITH 12 ROWS, 76 COLUMNS
2764,2768c2576
< IF vg_gui = 1 THEN
< 	OPEN FORM f_202_4 FROM "../forms/ordf202_4"
< ELSE
< 	OPEN FORM f_202_4 FROM "../forms/ordf202_4c"
< END IF
---
> OPEN FORM f_202_4 FROM "../forms/ordf202_4"
2771,2774c2579,2582
< --#DISPLAY 'Cuenta' 		TO bt_cuenta
< --#DISPLAY 'Descripción'	TO bt_descripcion
< --#DISPLAY 'Débito'		TO bt_valor_db
< --#DISPLAY 'Crédito'		TO bt_valor_cr
---
> DISPLAY 'Cuenta' 	TO bt_cuenta
> DISPLAY 'Descripción'	TO bt_descripcion
> DISPLAY 'Débito'	TO bt_valor_db
> DISPLAY 'Crédito'	TO bt_valor_cr
2781,2782c2589,2591
< 	--CALL fgl_winmessage(vg_producto,'No se han configurado auxiliares contables para IVA.','exclamation')
< 	CALL fl_mostrar_mensaje('No se han configurado auxiliares contables para IVA.','exclamation')
---
> 	CALL fgl_winmessage(vg_producto,
> 		'No se han configurado auxiliares contables para IVA.',
> 		'exclamation')
2791,2792c2600,2603
< 	--CALL fgl_winmessage(vg_producto,'No se han configurado auxiliares contables para este proveedor.','exclamation')
< 	CALL fl_mostrar_mensaje('No se han configurado auxiliares contables para este proveedor.','exclamation')
---
> 	CALL fgl_winmessage(vg_producto,
> 		'No se han configurado auxiliares contables para este ' ||
> 		'proveedor.',
> 		'exclamation')
2801,2802c2612,2614
< 	--CALL fgl_winmessage(vg_producto,'No se ha realizado ninguna recepción.','exclamation')
< 	CALL fl_mostrar_mensaje('No se ha realizado ninguna recepción.','exclamation')
---
> 	CALL fgl_winmessage(vg_producto,
> 		'No se ha realizado ninguna recepción.',
> 		'exclamation')
2822,2835d2633
< IF cuenta_cxp IS NULL THEN
< 	CALL fl_lee_compania_tesoreria(vg_codcia) RETURNING r_p00.*
< 	IF r_p00.p00_compania IS NULL THEN
< 		CALL fl_mostrar_mensaje('No existe una compañía configurada en Tesorería.','exclamation')
< 		LET int_flag = 1
< 		CLOSE WINDOW w_202_4
< 		RETURN r_b12.*
< 	END IF
< 	IF rm_c10.c10_moneda = rg_gen.g00_moneda_base THEN
< 		LET cuenta_cxp = r_p00.p00_aux_prov_mb
< 	ELSE
< 		LET cuenta_cxp = r_p00.p00_aux_prov_ma
< 	END IF
< END IF
2852,2854c2650
< IF rm_c01.c01_aux_cont IS NOT NULL THEN 
< 	LET r_b42.b42_iva_compra = rm_c01.c01_aux_cont
< END IF
---
> 
2860,2861c2656,2659
< 	--CALL fgl_winmessage(vg_producto,'No se ha configurado el plan de cuentas, no puede haber contabilización en línea.','exclamation')
< 	CALL fl_mostrar_mensaje('No se ha configurado el plan de cuentas, no puede haber contabilización en línea.','exclamation')
---
> 	CALL fgl_winmessage(vg_producto,
> 		'No se ha configurado el plan de cuentas, no puede haber ' ||
> 		'contabilización en línea.',
> 		'exclamation')
2867,2870c2665
< INITIALIZE rm_b12.* TO NULL
< LET rm_b12.b12_glosa = 'COMPROBANTE: ', rm_p01.p01_nomprov[1,25], ' ',
< 			rm_c13.c13_factura
< LET salir = 0
---
> LET salir    = 0
2872,2891d2666
< 	LET int_flag = 0
< 	INPUT BY NAME rm_b12.b12_glosa
< 		WITHOUT DEFAULTS
< 		ON KEY(INTERRUPT)
< 			LET int_flag = 0
< 			CALL fl_mensaje_abandonar_proceso() RETURNING resp
< 			IF resp = 'Yes' THEN
< 				LET int_flag = 1
< 				EXIT INPUT
< 			END IF
<         	ON KEY(F1,CONTROL-W)
< 			CALL llamar_visor_teclas()
< 		BEFORE INPUT
< 			--#CALL dialog.keysetlabel("F1","")
< 			--#CALL dialog.keysetlabel("CONTROL-W","")
< 	END INPUT
< 	IF int_flag THEN
< 		CLOSE WINDOW w_202_4
< 		RETURN r_b12.*
< 	END IF
2898a2674
> 
2905a2682
> 
2916,2917d2692
<         	ON KEY(F1,CONTROL-W)
< 			CALL control_visor_teclas_caracter_1() 
2936,2938d2710
< 		ON KEY(F5)
< 			LET int_flag = 0
< 			EXIT INPUT
2953,2954d2724
< 			--#CALL dialog.keysetlabel("F1","")
< 			--#CALL dialog.keysetlabel("CONTROL-W","")
2964,2965c2734,2738
< 			LET tot_debito  = tot_debito  - r_ctas[i].valor_db
< 			LET tot_credito = tot_credito - r_ctas[i].valor_cr
---
> --			LET tot_debito  = tot_debito  - r_ctas[i].valor_db
> --			LET tot_credito = tot_credito - r_ctas[i].valor_cr
> 			SELECT SUM(te_valor_db), SUM(te_valor_cr)
>  			  INTO tot_debito, tot_credito
> 			  FROM tmp_cuenta
2972,2977d2744
< -- :)
< 				IF cuenta IS NOT NULL THEN
< 					DELETE FROM tmp_cuenta
< 						WHERE te_cuenta = cuenta
< 				END IF
< -- :)
2984,2985c2751,2753
< 				--CALL fgl_winmessage(vg_producto,'No puede modificar esta cuenta.','exclamation')
< 				CALL fl_mostrar_mensaje('No puede modificar esta cuenta.','exclamation')
---
> 				CALL fgl_winmessage(vg_producto,
> 					'No puede modificar esta cuenta.',  
> 					'exclamation')
2993,2994c2761,2764
< 				--CALL fgl_winmessage(vg_producto,'No puede volver a ingresar esta cuenta.','exclamation')
< 				CALL fl_mostrar_mensaje('No puede volver a ingresar esta cuenta.','exclamation')
---
> 				CALL fgl_winmessage(vg_producto,
> 					'No puede volver a ingresar esta ' ||
> 					'cuenta.',  
> 					'exclamation')
3001,3002c2771,2773
< 				--CALL fgl_winmessage(vg_producto,'No existe cuenta contable.','exclamation')
< 				CALL fl_mostrar_mensaje('No existe cuenta contable.','exclamation')
---
> 				CALL fgl_winmessage(vg_producto,
> 					'No existe cuenta contable.',
> 					'exclamation')
3006,3007c2777,2780
< 				--CALL fgl_winmessage(vg_producto,'La cuenta ingresada debe ser del último nivel.','exclamation')
< 				CALL fl_mostrar_mensaje('La cuenta ingresada debe ser del último nivel.','exclamation')
---
> 				CALL fgl_winmessage(vg_producto,
> 					'La cuenta ingresada debe ' ||
> 					'ser del último nivel.',
> 					'exclamation')
3010,3015d2782
< -- :)
< 			IF cuenta IS NOT NULL THEN
< 				DELETE FROM tmp_cuenta
< 					WHERE te_cuenta = cuenta
< 			END IF
< -- :)
3089,3109d2855
< 			IF tot_debito IS NULL THEN
< 				CALL fl_mostrar_mensaje('No hay lineas de detalle para el débito.','exclamation')
< 				CONTINUE INPUT
< 			END IF
< 			IF tot_credito IS NULL THEN
< 				CALL fl_mostrar_mensaje('No hay lineas de detalle para el crédito.','exclamation')
< 				CONTINUE INPUT
< 			END IF
< 			LET tot_debito  = 0
< 			LET tot_credito = 0
< 			FOR l = 1 TO arr_count()
< 				IF r_ctas[l].valor_db IS NOT NULL THEN
< 					LET tot_debito  = tot_debito  +
< 							r_ctas[l].valor_db
< 				END IF
< 				IF r_ctas[l].valor_cr IS NOT NULL THEN
< 					LET tot_credito = tot_credito +
< 							r_ctas[l].valor_cr
< 				END IF
< 			END FOR
< 			DISPLAY BY NAME tot_debito, tot_credito
3111c2857,2860
< 				CALL fl_mostrar_mensaje('Los valores en el débito y el crédito deben ser iguales.','exclamation')
---
> 				CALL fgl_winmessage(vg_producto, 
> 					'Los valores en el débito y el ' ||
> 					'crédito deben ser iguales.',
> 					'exclamation')
3115,3119c2864,2868
< 				CALL fl_mostrar_mensaje('Los valores en el débito y el crédito deben ser iguales al total de la recepción.','exclamation')
< 				CONTINUE INPUT
< 			END IF
< 			IF tot_debito = 0 THEN
< 				CALL fl_mostrar_mensaje('No puede generar un Diario Contable con totales de CERO para el Débito y el Crédito.','exclamation')
---
> 				CALL fgl_winmessage(vg_producto, 
> 					'Los valores en el débito y el ' ||
> 					'crédito deben ser iguales ' ||
> 					'al total de la recepción.',
> 					'exclamation')
3160,3355d2908
< FUNCTION contabilizacion_activo()
< DEFINE r_a01		RECORD LIKE actt001.*
< DEFINE r_a10		RECORD LIKE actt010.*
< DEFINE r_b12		RECORD LIKE ctbt012.*
< DEFINE r_b13		RECORD LIKE ctbt013.*
< DEFINE r_b42		RECORD LIKE ctbt042.*
< DEFINE r_c01		RECORD LIKE ordt001.*
< DEFINE r_c10		RECORD LIKE ordt010.*
< DEFINE r_c11		RECORD LIKE ordt011.*
< DEFINE r_p00		RECORD LIKE cxpt000.*
< DEFINE r_p01		RECORD LIKE cxpt001.*
< DEFINE r_p02		RECORD LIKE cxpt002.*
< DEFINE r_a12		RECORD LIKE actt012.*
< DEFINE cuenta_cxp	LIKE ctbt010.b10_cuenta
< DEFINE cta_iva		LIKE ctbt010.b10_cuenta
< DEFINE depre_mb		LIKE actt010.a10_val_dep_mb
< DEFINE depre_ma		LIKE actt010.a10_val_dep_ma
< DEFINE valor_bien	DECIMAL(14,2)
< DEFINE valor		DECIMAL(14,2)
< DEFINE i		SMALLINT
< 
< LET int_flag = 0
< INITIALIZE r_b12.*, cuenta_cxp TO NULL
< CALL fl_lee_orden_compra(vg_codcia, vg_codloc, rm_c13.c13_numero_oc)
< 	RETURNING r_c10.*
< CALL fl_lee_auxiliares_generales(vg_codcia, vg_codloc) RETURNING r_b42.*
< IF r_b42.b42_compania IS NULL THEN
< 	CALL fl_mostrar_mensaje('No se han configurado auxiliares contables para Activos.','exclamation')
< 	RETURN r_b12.*
< END IF
< CALL fl_lee_tipo_orden_compra(r_c10.c10_tipo_orden) RETURNING r_c01.*
< LET cta_iva = r_c01.c01_aux_cont
< IF r_c01.c01_aux_cont IS NULL THEN
< 	LET cta_iva = r_b42.b42_iva_compra
< END IF
< CALL fl_lee_proveedor_localidad(vg_codcia, vg_codloc, r_c10.c10_codprov)
< 	RETURNING r_p02.*
< IF r_p02.p02_codprov IS NULL THEN
< 	CALL fl_mostrar_mensaje('No se han configurado auxiliares contables para este proveedor.','exclamation')
< 	RETURN r_b12.*
< END IF
< IF r_c10.c10_moneda = rg_gen.g00_moneda_base THEN
< 	LET cuenta_cxp = r_p02.p02_aux_prov_mb
< ELSE
< 	LET cuenta_cxp = r_p02.p02_aux_prov_ma
< END IF
< IF cuenta_cxp IS NULL THEN
< 	CALL fl_lee_compania_tesoreria(vg_codcia) RETURNING r_p00.*
< 	IF r_p00.p00_compania IS NULL THEN
< 		CALL fl_mostrar_mensaje('No existe una compañía configurada en Tesorería.','exclamation')
< 		RETURN r_b12.*
< 	END IF
< 	IF r_c10.c10_moneda = rg_gen.g00_moneda_base THEN
< 		LET cuenta_cxp = r_p00.p00_aux_prov_mb
< 	ELSE
< 		LET cuenta_cxp = r_p00.p00_aux_prov_ma
< 	END IF
< END IF
< LET r_b12.b12_compania    = vg_codcia
< LET r_b12.b12_tipo_comp   = 'DC'
< LET r_b12.b12_num_comp    = fl_numera_comprobante_contable(vg_codcia,
<                             	r_b12.b12_tipo_comp, YEAR(TODAY), MONTH(TODAY))
< LET r_b12.b12_estado      = 'A'
< LET r_b12.b12_subtipo     = NULL
< CALL fl_lee_proveedor(r_c10.c10_codprov) RETURNING r_p01.*
< LET r_b12.b12_glosa       = r_p01.p01_nomprov CLIPPED, ' ORDEN DE COMPRA ',
< 				rm_c13.c13_numero_oc USING "<<<<<<<<<&"
< LET r_b12.b12_benef_che   = NULL
< LET r_b12.b12_num_cheque  = NULL
< LET r_b12.b12_origen      = 'A'
< LET r_b12.b12_moneda      = r_c10.c10_moneda
< LET r_b12.b12_paridad     = r_c10.c10_paridad
< LET r_b12.b12_fec_proceso = TODAY
< LET r_b12.b12_fec_reversa = NULL
< LET r_b12.b12_tip_reversa = NULL
< LET r_b12.b12_num_reversa = NULL
< LET r_b12.b12_fec_modifi  = NULL
< LET r_b12.b12_modulo      = 'AF'
< LET r_b12.b12_usuario     = vg_usuario
< LET r_b12.b12_fecing      = CURRENT
< INSERT INTO ctbt012 VALUES(r_b12.*)
< DECLARE q_c11 CURSOR FOR
< 	SELECT * FROM ordt011
< 		WHERE c11_compania  = r_c10.c10_compania
< 		  AND c11_localidad = r_c10.c10_localidad
< 		  AND c11_numero_oc = r_c10.c10_numero_oc
< LET i = 1
< FOREACH q_c11 INTO r_c11.*
< 	CALL fl_lee_codigo_bien(r_c11.c11_compania, r_c11.c11_codigo)
< 		RETURNING r_a10.*
< 	LET valor_bien = r_c11.c11_precio - r_c11.c11_val_descto
< 	LET depre_mb   = ((valor_bien * r_a10.a10_porc_deprec) / 100) / 12
< 	LET depre_ma   = 0
< 	IF r_c10.c10_moneda <> rg_gen.g00_moneda_base THEN
< 		LET depre_ma = depre_mb 
< 		LET depre_mb = depre_mb * r_c10.c10_paridad
< 	END IF
< 	UPDATE actt010 SET a10_estado     = 'S',
< 			   a10_numero_oc  = r_c11.c11_numero_oc,
< 			   a10_codprov    = r_c10.c10_codprov,
< 			   a10_fecha_comp = r_c10.c10_fecha_fact,
< 			   a10_moneda     = r_c10.c10_moneda,
< 			   a10_paridad    = r_c10.c10_paridad,
< 			   a10_valor      = valor_bien,
< 			   a10_valor_mb   = (valor_bien	* r_c10.c10_paridad),
< 			   a10_val_dep_mb = depre_mb,
< 			   a10_val_dep_ma = depre_ma
< 		WHERE a10_compania    = r_c11.c11_compania
< 		  AND a10_codigo_bien = r_c11.c11_codigo
< 	CALL fl_lee_codigo_bien(r_c11.c11_compania, r_c11.c11_codigo)
< 		RETURNING r_a10.*
< 	CALL fl_lee_grupo_activo(r_a10.a10_compania, r_a10.a10_grupo_act)
< 		RETURNING r_a01.*
< 	IF r_a01.a01_aux_activo IS NULL THEN
< 		ROLLBACK WORK
< 		CALL fl_mostrar_mensaje('No existe auxiliar contable para el codigo ' || r_c11.c11_codigo USING "<<<<<<<<<&" || '.', 'stop')
< 		EXIT PROGRAM
< 	END IF
< 	LET valor = r_c11.c11_precio - r_c11.c11_val_descto
< 	CALL grabar_detalle_cont(r_b12.*, r_a01.a01_aux_activo, valor, i)
< 	LET i = i + 1
< END FOREACH
< CALL grabar_detalle_cont(r_b12.*, cta_iva, r_c10.c10_tot_impto, i)
< LET valor = r_c10.c10_tot_compra * (-1)
< CALL grabar_detalle_cont(r_b12.*, cuenta_cxp, valor, i + 1)
< CALL grabar_conf_cont_compras(r_b12.b12_tipo_comp, r_b12.b12_num_comp)
< FOREACH q_c11 INTO r_c11.*
< 	INITIALIZE r_a12.* TO NULL
< 	LET r_a12.a12_compania 	  = vg_codcia
< 	LET r_a12.a12_codigo_tran = 'IN'
< 	LET r_a12.a12_numero_tran = fl_retorna_num_tran_activo(vg_codcia, 
< 							  r_a12.a12_codigo_tran)
< 	IF r_a12.a12_numero_tran <= 0 THEN
< 		ROLLBACK WORK
< 		EXIT PROGRAM
< 	END IF
< 	LET r_a12.a12_codigo_bien = r_c11.c11_codigo
< 	LET r_a12.a12_referencia  = r_b12.b12_glosa
< 	CALL fl_lee_codigo_bien(r_c11.c11_compania, r_c11.c11_codigo)
< 		RETURNING r_a10.*
< 	LET r_a12.a12_locali_ori  = r_a10.a10_localidad
< 	LET r_a12.a12_depto_ori   = r_a10.a10_cod_depto
< 	LET r_a12.a12_porc_deprec = r_a10.a10_porc_deprec
< 	LET r_a12.a12_valor_mb 	  = r_c11.c11_precio- r_c11.c11_val_descto
< 	LET r_a12.a12_valor_ma 	  = 0
< 	LET r_a12.a12_tipcomp_gen = r_b12.b12_tipo_comp
< 	LET r_a12.a12_numcomp_gen = r_b12.b12_num_comp
< 	LET r_a12.a12_usuario 	  = vg_usuario
< 	LET r_a12.a12_fecing 	  = CURRENT
< 	INSERT INTO actt012 VALUES (r_a12.*)
< END FOREACH
< RETURN r_b12.*
< 
< END FUNCTION
< 
< 
< 
< FUNCTION grabar_detalle_cont(r_b12, cuenta, valor, i)
< DEFINE r_b12		RECORD LIKE ctbt012.*
< DEFINE cuenta		LIKE ctbt010.b10_cuenta
< DEFINE valor		DECIMAL(14,2)
< DEFINE i		SMALLINT
< DEFINE r_b13		RECORD LIKE ctbt013.*
< DEFINE r_c10		RECORD LIKE ordt010.*
< 
< INITIALIZE r_b13.* TO NULL
< LET r_b13.b13_compania    = r_b12.b12_compania
< LET r_b13.b13_tipo_comp   = r_b12.b12_tipo_comp
< LET r_b13.b13_num_comp    = r_b12.b12_num_comp
< LET r_b13.b13_secuencia   = i
< LET r_b13.b13_tipo_doc    = NULL
< LET r_b13.b13_cuenta      = cuenta
< CALL fl_lee_orden_compra(vg_codcia, vg_codloc, rm_c13.c13_numero_oc)
< 	RETURNING r_c10.*
< LET r_b13.b13_glosa  = 'PROV. # ', r_c10.c10_codprov
< 			USING "<<<<&", ' OC. # ',
< 			r_c10.c10_numero_oc USING "<<<<<<<<<&"
< IF r_c10.c10_moneda = rg_gen.g00_moneda_base THEN
< 	LET r_b13.b13_valor_base  = valor
< 	LET r_b13.b13_valor_aux   = 0
< ELSE
< 	LET r_b13.b13_valor_base  = valor * r_c10.c10_paridad
< 	LET r_b13.b13_valor_aux   = valor
< END IF
< LET r_b13.b13_num_concil  = NULL
< LET r_b13.b13_filtro      = NULL
< LET r_b13.b13_fec_proceso = TODAY
< LET r_b13.b13_codcli      = NULL
< LET r_b13.b13_codprov     = r_c10.c10_codprov
< LET r_b13.b13_pedido      = NULL
< INSERT INTO ctbt013 VALUES(r_b13.*)
< 
< END FUNCTION
< 
< 
< 
3450c3003
< DEFINE query		CHAR(500)
---
> DEFINE query		VARCHAR(500)
3460a3014,3016
> 	CALL fgl_winmessage(vg_producto,	
> 		'No existe tipo de comprobante para Diario de Compras: DO',
> 		'exclamation')
3462,3463d3017
< 	--CALL fgl_winmessage(vg_producto,'No existe tipo de comprobante para Diario de Compras: DO','exclamation')
< 	CALL fl_mostrar_mensaje('No existe tipo de comprobante para Diario de Compras: DO.','exclamation')
3466,3470c3020,3066
< {
< LET glosa = rm_p01.p01_nomprov[1,19], ' ', rm_c13.c13_factura
< }
< LET glosa = 'OC # ', rm_c13.c13_numero_oc USING "<<<<<<<&", ' RECEPCION # ',
< 		rm_c13.c13_num_recep USING "<<<<<<<&"
---
> 
> --LET glosa = 'OC # ' || rm_c13.c13_numero_oc || 
> --	    ' RECEPCION # ' || rm_c13.c13_num_recep   
> -- OJO
> LET glosa = 'OC # ' || rm_c13.c13_numero_oc || 
> 	    ' FACTURA # ' || rm_c13.c13_factura   
> 
> ------------------------
>   INITIALIZE rm_c10.* TO NULL
>   DECLARE q_num_prov CURSOR FOR
>   SELECT * FROM ordt010
>    WHERE c10_compania = vg_codcia
>      AND c10_localidad= rm_c13.c13_localidad
>      AND c10_numero_oc= rm_c13.c13_numero_oc
> --display 'O/C : ', rm_c13.c13_localidad, '   ',rm_c13.c13_numero_oc
>   OPEN q_num_prov
>   FETCH q_num_prov INTO rm_c10.*
>   IF STATUS <> NOTFOUND THEN
>           INITIALIZE rm_p02.* TO NULL
>           DECLARE q_prov CURSOR FOR
>           SELECT * FROM cxpt002
>            WHERE p02_compania = vg_codcia
>              AND p02_localidad= rm_c13.c13_localidad
>              AND p02_codprov  = rm_c10.c10_codprov
>           OPEN q_prov
>           FETCH q_prov INTO rm_p02.*
>           IF STATUS <> NOTFOUND THEN
>              INITIALIZE rm_p01.* TO NULL
>              DECLARE q_cod CURSOR FOR
>              SELECT * FROM cxpt001
>               WHERE p01_codprov = rm_c10.c10_codprov
>              OPEN q_cod
>              FETCH q_cod INTO rm_p01.*
>              IF STATUS <> NOTFOUND THEN
>                    LET glosa = rm_p01.p01_nomprov CLIPPED, ' ', rm_c13.c13_factura CLIPPED
> --		   display 'GLOSA ENCONTRADA ..', glosa
>              END IF
>           CLOSE q_cod
>           FREE  q_cod
>           END IF
>           CLOSE q_prov
>           FREE  q_prov
>   END IF
>   CLOSE q_num_prov
>   FREE  q_num_prov
> ------------------------
> 
3478,3479c3074
< --LET r_b12.b12_glosa       = 'COMPROBANTE: ' || glosa CLIPPED 
< LET r_b12.b12_glosa       = rm_b12.b12_glosa CLIPPED
---
> LET r_b12.b12_glosa       = 'COMPROBANTE: ' || glosa CLIPPED 
3498c3093
< 
---
> --display 'GLOSASAAAA  ...', glosa CLIPPED
3502c3097
< 	    '			  b13_num_concil, b13_fec_proceso, b13_codprov) ', 
---
> 	    '			  b13_num_concil, b13_fec_proceso) ', 
3507,3508c3102
< 	    ' 		DATE("', r_b12.b12_fec_proceso, '"),',
< 		        rm_c10.c10_codprov,
---
> 	    ' 		DATE("', r_b12.b12_fec_proceso, '")',
3525c3119
< 	    '			  b13_num_concil, b13_fec_proceso,b13_codprov) ', 
---
> 	    '			  b13_num_concil, b13_fec_proceso) ', 
3530,3531c3124
< 	    ' 		DATE("', r_b12.b12_fec_proceso, '"),',
< 		        rm_c10.c10_codprov,
---
> 	    ' 		DATE("', r_b12.b12_fec_proceso, '")',
3538,3542c3131,3136
< 	      b13_tipo_comp = r_b12.b12_tipo_comp AND 
< 	      b13_num_comp  = r_b12.b12_num_comp
< 
< CALL grabar_conf_cont_compras(r_b12.b12_tipo_comp, r_b12.b12_num_comp)
< 
---
>               b13_tipo_comp = r_b12.b12_tipo_comp AND  
>               b13_num_comp  = r_b12.b12_num_comp
> INSERT INTO ordt040 VALUES(vg_codcia, vg_codloc, rm_c13.c13_numero_oc,
> 		           rm_c13.c13_num_recep, r_b12.b12_tipo_comp,
> 		           r_b12.b12_num_comp)
> CALL control_impresion_comprobantes(r_b12.b12_tipo_comp, r_b12.b12_num_comp)
3548,3555c3142,3156
< 
< FUNCTION grabar_conf_cont_compras(tipo_comp, num_comp)
< DEFINE tipo_comp	LIKE ctbt012.b12_tipo_comp
< DEFINE num_comp		LIKE ctbt012.b12_num_comp
< 
< INSERT INTO ordt040 VALUES(vg_codcia, vg_codloc, rm_c13.c13_numero_oc,
< 		           rm_c13.c13_num_recep, tipo_comp, num_comp)
< 
---
> FUNCTION control_impresion_comprobantes(tipo,numero)
> DEFINE tipo		LIKE ctbt012.b12_tipo_comp
> DEFINE numero		LIKE ctbt012.b12_num_comp
> DEFINE cocoliso		VARCHAR(300)
> DEFINE resp			VARCHAR(10)
> CALL fgl_winquestion(vg_producto, 'Desea imprimir comprobante contable?', 
> 	'No', 'Yes|No', 'question', 1) RETURNING resp
> IF resp = 'Yes' THEN
> 	LET cocoliso = 'cd ..', vg_separador, '..', vg_separador,
> 		'TESORERIA', vg_separador, 'fuentes', 
> 		vg_separador, '; fglrun cxpp403 ', vg_base, ' ',
> 		'TE', vg_codcia, ' ', vg_codloc, ' ',
> 		tipo, ' ',numero
> 	RUN cocoliso
> END IF
3558,3559d3158
< 
< 
3572,3573c3171,3173
<         --CALL fgl_winmessage(vg_producto,'No existe recepción de orden de compra.','stop')
< 	CALL fl_mostrar_mensaje('No existe recepción de orden de compra.','stop')
---
>         CALL fgl_winmessage(vg_producto, 
> 		'No existe recepción de orden de compra.',
> 		'exclamation')
3583c3183
< FUNCTION retorna_tam_arr()
---
> FUNCTION validar_parametros()
3585,3587c3185,3189
< --#LET vm_size_arr = fgl_scr_size('r_detalle')
< IF vg_gui = 0 THEN
< 	LET vm_size_arr = 6
---
> CALL fl_lee_modulo(vg_modulo) RETURNING rg_mod.*
> IF rg_mod.g50_modulo IS NULL THEN
> 	CALL fgl_winmessage(vg_producto, 'No existe módulo: ' || vg_modulo, 
>                             'stop')
> 	EXIT PROGRAM
3589,3598c3191,3195
< 
< END FUNCTION
< 
< 
< 
< FUNCTION retorna_tam_arr2()
< 
< --#LET vm_size_arr2 = fgl_scr_size('r_detalle_2')
< IF vg_gui = 0 THEN
< 	LET vm_size_arr2 = 7
---
> CALL fl_lee_compania(vg_codcia) RETURNING rg_cia.*
> IF rg_cia.g01_compania IS NULL THEN
> 	CALL fgl_winmessage(vg_producto, 'No existe compañía: '|| vg_codcia, 
>                             'stop')
> 	EXIT PROGRAM
3600,3635c3197,3199
< 
< END FUNCTION
< 
< 
< 
< FUNCTION muestra_tipopago(tipopago)
< DEFINE tipopago		CHAR(1)
< 
< CASE tipopago
< 	WHEN 'C'
< 		DISPLAY 'CONTADO' TO tit_tipo_pago
< 	WHEN 'R'
< 		DISPLAY 'CREDITO' TO tit_tipo_pago
< 	OTHERWISE
< 		CLEAR c10_tipo_pago, tit_tipo_pago
< END CASE
< 
< END FUNCTION
< 
< 
< 
< FUNCTION retorna_num_tran_activo(codcia, codigo_tran) 
< DEFINE codcia 		LIKE actt005.a05_compania
< DEFINE codigo_tran	LIKE actt005.a05_codigo_tran
< DEFINE numero		LIKE actt005.a05_numero
< 
< DECLARE up_tact CURSOR FOR SELECT a05_numero FROM actt005
< 	WHERE a05_compania    = codcia AND
< 	      a05_codigo_tran = codigo_tran
< 	FOR UPDATE
< OPEN up_tact
< FETCH up_tact INTO numero
< IF status = NOTFOUND THEN
< 	ROLLBACK WORK
< 	CALL fl_mostrar_mensaje('No existe control secuencia en actt005',
< 				'stop')
---
> IF rg_cia.g01_estado <> 'A' THEN
> 	CALL fgl_winmessage(vg_producto, 'Compañía no está activa: ' || 
>                             vg_codcia, 'stop')
3638,3665c3202,3203
< LET numero = numero + 1
< UPDATE actt005 SET a05_numero = numero + 1
< 	WHERE CURRENT OF up_tact
< RETURN numero
< 
< END FUNCTION
< 
< 
< 
< FUNCTION control_ver_contabilizacion()
< DEFINE r_c40		RECORD LIKE ordt040.*
< DEFINE command_run 	VARCHAR(200)
< DEFINE run_prog		CHAR(10)
< 
< INITIALIZE r_c40.* TO NULL
< DECLARE q_c40 CURSOR FOR
< 	SELECT * FROM ordt040
< 		WHERE c40_compania  = vg_codcia
< 		  AND c40_localidad = vg_codloc
< 		  AND c40_numero_oc = rm_c13.c13_numero_oc
< 		  AND c40_num_recep = rm_c13.c13_num_recep
< OPEN q_c40
< FETCH q_c40 INTO r_c40.*
< CLOSE q_c40
< FREE q_c40
< IF r_c40.c40_compania IS NULL THEN
< 	CALL fl_mostrar_mensaje('Esta recepcion no tiene un comprobante contable.', 'exclamation')
< 	RETURN
---
> IF vg_codloc IS NULL THEN
> 	LET vg_codloc   = fl_retorna_agencia_default(vg_codcia)
3667,3690c3205,3214
< {-- ESTO PARA LLAMAR AL PROGRAMA SEGÚN SEA EL AMBIENTE --}
< LET run_prog = '; fglrun '
< IF vg_gui = 0 THEN
< 	LET run_prog = '; fglgo '
< END IF
< {--- ---}
< LET command_run = 'cd ..', vg_separador, '..', vg_separador, 'CONTABILIDAD',
< 		vg_separador, 'fuentes', vg_separador, run_prog, 'ctbp201 ',
< 		vg_base, ' CB ', vg_codcia, ' "', r_c40.c40_tipo_comp, '" ',
< 		r_c40.c40_num_comp
< RUN command_run
< 
< END FUNCTION
< 
< 
< 
< FUNCTION llamar_visor_teclas()
< DEFINE a		SMALLINT
< 
< IF vg_gui = 0 THEN
< 	CALL fl_visor_teclas_caracter() RETURNING int_flag 
< 	LET a = fgl_getkey()
< 	CLOSE WINDOW w_tf
< 	LET int_flag = 0
---
> CALL fl_lee_localidad(vg_codcia, vg_codloc) RETURNING rg_loc.*
> IF rg_loc.g02_localidad IS NULL THEN
> 	CALL fgl_winmessage(vg_producto, 'No existe localidad: ' || vg_codloc, 
>                             'stop')
> 	EXIT PROGRAM
> END IF
> IF rg_loc.g02_estado <> 'A' THEN
> 	CALL fgl_winmessage(vg_producto, 'Localidad no está activa: ' || 
>                             vg_codloc, 'stop')
> 	EXIT PROGRAM
3692,3707d3215
< 
< END FUNCTION
< 
< 
< 
< FUNCTION control_visor_teclas_caracter_1() 
< DEFINE a, fila		INTEGER
< 
< CALL fl_visor_teclas_caracter() RETURNING fila
< LET a = fila + 2
< DISPLAY 'Teclas exclusivas de este proceso:' AT a,2 ATTRIBUTE(REVERSE)	
< LET a = a + 1
< DISPLAY '<F5>      Cabecera'                 AT a,2
< DISPLAY  'F5' AT a,3 ATTRIBUTE(REVERSE)
< LET a = fgl_getkey()
< CLOSE WINDOW w_tf
